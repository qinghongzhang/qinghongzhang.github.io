<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在Centos7中部署Django项目</title>
    <url>/2019/11/28/%E5%9C%A8Centos7%E4%B8%AD%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="这次部署真的爽，一步到位，哈哈哈"><a href="#这次部署真的爽，一步到位，哈哈哈" class="headerlink" title="这次部署真的爽，一步到位，哈哈哈"></a>这次部署真的爽，一步到位，哈哈哈</h1><hr><ol>
<li>首先你你得去<a href="https://qinghongzhang.github.io/2019/11/11/%E5%9C%A8centos7%E9%87%8C%E5%AE%89%E8%A3%85Python3-7/" target="_blank" rel="noopener">安装python</a>,去看看我的这篇博客吧，骚年！ </li>
<li>还是建议大家在虚拟环境里操作的   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv  #下载虚拟环境包</span><br><span class="line">ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv  #建立软连接</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">3. 安装成功在根目录下建立两个文件夹，主要用于存放env和网站文件的。(个人习惯，其它人可根据自己的实际情况处理)</span><br></pre></td></tr></table></figure>

</li>
</ol><a id="more"></a>

<p>mkdir -p /data/env<br>mkdir -p /data/wwwroot</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. 切换到/data/env/下，创建指定版本的虚拟环境  </span><br><span class="line">`virtualenv --python=/usr/bin/python3 pyweb #pyweb自己可以命名`</span><br><span class="line">5. 启动虚拟环境  </span><br><span class="line">`/usr/local/nginx/sbin/./nginx`    </span><br><span class="line">6. 虚拟环境里安装django和uwsgi</span><br></pre></td></tr></table></figure>

<p>pip3 install django （如果用于生产的话，则需要指定安装和你项目相同的版本）<br>pip3 install uwsgi</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**留意：uwsgi要安装两次，先在系统里安装一次，然后进入对应的虚拟环境安装一次。退出虚拟环境的命令是 deactivate**  </span><br><span class="line">7. 现在回到你的本地进入你要上传项目的根目录  </span><br><span class="line">`pip freeze &gt; requirements.txt  #在本地终端执行导出依赖包`  </span><br><span class="line">再把项目压缩打包，上传到服务器对应的目录解压</span><br><span class="line"></span><br><span class="line">8. 把你的项目上传到服务器</span><br></pre></td></tr></table></figure>

<p>yum install lrzsz  #下载上传工具<br>rz   #执行之后等一会，再选择你要上传的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9. 解压压缩包  </span><br><span class="line">如果是 .zip压缩包</span><br></pre></td></tr></table></figure>

<p>yum install unzip<br>unzip 你的项目.zip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这样就解压成功  </span><br><span class="line">如果是 .tar或.tgz </span><br><span class="line">`tar -zxvf 你的项目.tar/tgz`  </span><br><span class="line">10. 再创建一个虚拟环境(请看前面第四步)  </span><br><span class="line">11. 进入虚拟环境后 再进入项目路径（你项目的根目录）</span><br><span class="line">`pip3 install -r requirements.txt  #安装依赖包`  </span><br><span class="line">12. 查看项目在服务器上是否运行成功  </span><br><span class="line">`python3 manage.py runserver`不成功就检查一下代码写对没，或者前面的步骤是不是对的  </span><br><span class="line">13. 开始配置uwsgi   </span><br><span class="line">我们网站项目路径是 /data/wwwroot/mysite/,在项目根目录下创建</span><br><span class="line">mysite.xml文件，输入如下内容：</span><br></pre></td></tr></table></figure>

<uwsgi>    
   <socket>127.0.0.1:8997</socket> <!-- 内部端口，自定义 --> 
   <chdir>/data/wwwroot/mysite/</chdir> <!-- 项目路径 -->            
   <module>mysite.wsgi</module>  <!-- mysite为wsgi.py所在目录名--> 
   <processes>4</processes> <!-- 进程数 -->     
   <daemonize>uwsgi.log</daemonize> <!-- 日志文件 -->
</uwsgi>  

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14. 安装nginx和配置nginx.conf文件</span><br></pre></td></tr></table></figure>

<p>wget <a href="http://nginx.org/download/nginx-1.16.1.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.16.1.tar.gz</a>  #下载包<br>tar xvf nginx-1.16.1.tar.gz  #解压  </p>
<h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><p>./configure<br>make<br>make install  </p>
<h1 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h1><p>tail -1 /etc/rc.d/rc.local</p>
<h1 id="建立软链"><a href="#建立软链" class="headerlink" title="建立软链"></a>建立软链</h1><p>ln -s /usr/local//nginx/sbin/nginx /usr/bin/nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx一般默认安装好的路径为/usr/local/nginx</span><br><span class="line">在/usr/local/nginx/conf/中先备份一下nginx.conf文件，以防意外。  </span><br><span class="line">`cp nginx.conf nginx.conf.bak`  </span><br><span class="line">然后打开nginx.conf，把原来的内容删除，直接加入以下内容：(:%d 删除全部)</span><br></pre></td></tr></table></figure>

<p>events {<br>    worker_connections  1024;<br>}<br>http {<br>    include       mime.types;<br>    default_type  application/octet-stream;<br>    sendfile        on;<br>    server {<br>        listen 80;<br>        server_name  <a href="http://www.django.cn" target="_blank" rel="noopener">www.django.cn</a>; #改为自己的域名，没域名修改为127.0.0.1:80<br>        charset utf-8;<br>        location / {<br>           include uwsgi_params;<br>           uwsgi_pass 127.0.0.1:8997;  #端口要和uwsgi里配置的一样<br>           uwsgi_param UWSGI_SCRIPT mysite.wsgi;  #wsgi.py所在的目录名+.wsgi<br>           uwsgi_param UWSGI_CHDIR /data/wwwroot/mysite/; #项目路径</p>
<pre><code>    }
    location /static/ {
    alias /data/wwwroot/mysite/static/; #静态资源路径
    }
}</code></pre><p>} </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要留意备注的地方，要和UWSGI配置文件mysite.xml，还有项目路径对应上。</span><br><span class="line">进入/usr/local/nginx/sbin/目录</span><br><span class="line">执行./nginx -t命令先检查配置文件是否有错，没有错就执行以下命令： </span><br><span class="line">`/usr/local/nginx/sbin/./nginx    #启动nginx`  </span><br><span class="line">终端没有任何提示就证明nginx启动成功。可以使用你的服务器地址查看，成功之后就会看到一个nginx欢迎页面。   </span><br><span class="line">15. 回到项目  </span><br><span class="line">在settings.py里设置：</span><br><span class="line"></span><br><span class="line">1、关闭DEBUG模式。</span><br><span class="line"></span><br><span class="line">DEBUG = False </span><br><span class="line"></span><br><span class="line">2、ALLOWED_HOSTS设置为* 表示任何IP都可以访问网站。</span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [&apos;*&apos;]  </span><br><span class="line">16. 进入网站项目目录  </span><br><span class="line">`uwsgi -x mysite.xml`  </span><br><span class="line">17. 以上没出问题的话  </span><br><span class="line">`/usr/local/nginx/sbin/./nginx -s reload  #重启nginx`   </span><br><span class="line">此时在浏览器应该能够访问到你的项目了    </span><br><span class="line"></span><br><span class="line">------ </span><br><span class="line"># 线上部署admin后台样式没有生效的问题  </span><br><span class="line"> 1. 在setting尾部：</span><br></pre></td></tr></table></figure>

<p> STATIC_ROOT  = os.path.join(BASE_DIR, ‘static’)#指定样式收集目录<br>#或<br>STATIC_ROOT = ‘/www/mysite/mysite/static’  #指定样式收集目录</p>
<pre><code>2. 收集CSS样式，在终端输入：
`python manage.py collectstatic`  
运行这个命令之后，就会自动把后台CSS样式收集到/static/目录下。刷新页面就能恢复样式！

[参考文章](https://www.django.cn/article/show-4.html#banqian)


</code></pre>]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>重拾Python --简单爬虫(没用任何第三方库)</title>
    <url>/2019/11/15/%E9%87%8D%E6%8B%BEPython-%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB-%E6%B2%A1%E7%94%A8%E4%BB%BB%E4%BD%95%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
    <content><![CDATA[<p>想想自己天天忙着整框架，随着程序设计大赛到来，去看了一眼以前买的Python二级题，发现好多不会做，Python语法掌握并不熟练，现在又回头重新温习，果然收获挺多。  </p><a id="more"></a>
<h3 id="要求从HTML文件里提取所有的图片的url"><a href="#要求从HTML文件里提取所有的图片的url" class="headerlink" title="要求从HTML文件里提取所有的图片的url"></a>要求从HTML文件里提取所有的图片的url</h3><ol>
<li><code>http://www.ngchina.com.cn/photography/photo_of_the_day/6134.html</code>进入这个网站，把页面的源码复制保存到文件 b.html中 </li>
<li>创建一个文件 a.txt来保存提取到的url  </li>
<li>打开你的编辑器准备开工  </li>
<li>主要学习这种<code>自顶向下</code>的编程思想，代码难度不大，这里直接贴代码  <ul>
<li>我是先写的主函数，然后再写分支函数，这样逻辑很清楚<pre><code>#逐行取出HTML
def getHTMLlines(inputfile):
f=open(inputfile,&apos;r&apos;,encoding=&apos;utf-8&apos;)
ls=f.readlines()
f.close()
return ls
# 把拿到的url存入列表
def extractImageUrls(htmlLines):
urls=[]
for line in htmlLines:
  if &apos;img&apos; in line:
      url=line.split(&apos;src=&apos;)[-1].split(&apos;&quot;&apos;)[1]                                                                 
      if &apos;http&apos; in url:
          urls.append(url)
return urls
&apos;&apos;&apos;  
img标签&lt;img title=&quot;photo story&quot; src=&quot;http://image.ngchina.com.cn/2019/1016/thumb_469_352_20191016034927613.jpg&quot; width=&quot;469px&quot; /&gt;
把这一行先src=分成一个有两个元素的列表选中其中的最后一个元素（第二个），再以&quot;把src=&quot;http://image.ngchina.com.cn/2019/1016/thumb_469_352_20191016034927613.jpg&quot; width=&quot;469px&quot; /&gt;
这一部分分开成一个有5个元素的列表，发现图片的url正好是第二个元素，所以是.split(&apos;&quot;&apos;)[1] 
&apos;&apos;&apos;
#打印出你得到的url 并且统计条数
def showResults(imageUrls):
count=0
for url in imageUrls:
  print(&apos;第{:2}个URL:{}&apos;.format(count,url))
  count+=1
#保存到指定文件
def saveResults(outputfile,imageUrls):
f=open(outputfile,&quot;w&quot;)
for url in imageUrls:
  f.write(url+&apos;\n&apos;)
f.close()
#主函数
def main():
inputfile=&apos;b.html&apos;
outputfile=&apos;a.txt&apos;
htmlLines=getHTMLlines(inputfile)
imageUrls=extractImageUrls(htmlLines)
showResults(imageUrls)
saveResults(outputfile,imageUrls)
main()</code></pre>睡觉</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>安装mysql&数据迁移</title>
    <url>/2019/11/14/%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<h2 id="本地安装MYSQL"><a href="#本地安装MYSQL" class="headerlink" title="本地安装MYSQL"></a>本地安装MYSQL</h2><ol>
<li>打开<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">官网</a>下载社区版本的mysql </li>
<li>下载完后解压  </li>
<li>解压后进入目录在含有bin,lib,run等这个目录下创建一个配置文件 my.ini  <pre><code>#my.ini 
[mysqld]
# 设置mysql的安装目录
basedir=C:/mysql-8.0.11-winx64
# 设置mysql数据库的数据的存放目录
datadir=C:/mysql-8.0.11-winx64/data
# 设置默认使用的端口
port=3306
# 允许最大连接数
max_connections=200
# 允许连接失败的次数。这是为了防止有人试图攻击数据库
max_connect_errors=10
# 服务端使用的字符集
character-set-server=utf8mb4
# 数据库字符集对应一些排序等规则使用的字符集
collation-server=utf8mb4_general_ci
# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
# 默认使用“mysql_native_password”插件作为认证加密方式
# MySQL8.0默认认证加密方式为caching_sha2_password
default_authentication_plugin=mysql_native_password
[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8mb4
[client]
default-character-set=utf8mb4
port=3306 </code></pre></li>
<li>之后进入bin目录在这个目录下打开cmd,初始化一下这个数据库  </li>
<li>输入命令<code>mysqld --initialize-insecure --user=mysql --console</code> </li>
<li>再安装mysql ,输入命令<code>mysqld --install        ps:如果是在powershell里用.\mysqld --install</code>  <ul>
<li>如果出现<code>Install/Remove of the Service Denied!</code>,那就是因为你没有用管理员身份打开cmd，用管理员打开就行了  </li>
</ul>
</li>
<li>打开服务 <code>net start mysql</code>,</li>
<li>进入MySQL，<code>mysql -u root -p  ps:如果是在powershell里用./mysql -u root -p</code> 其中的root是我们刚刚初始化是自动创建的账号，没有密码 </li>
<li>然后输入<code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;m48577&#39;;</code> 修改密码  </li>
<li>输入<code>exit</code>退出MySQL，重复上面的第8步，登录进入数据库<br>至此安装MySQL安装成功 </li>
</ol><a id="more"></a>
<hr>
<ul>
<li><code>create database mysite_db default charset=utf8mb4 default collate utf8mb4_unicode_ci;</code> 创建名字叫mysite_db的数据库 </li>
<li><code>show databases;</code>显示所有你已经创建的数据库 </li>
<li><code>create user &#39;huabeier&#39;@&#39;localhost&#39; identified by &#39;m48577&#39;;</code>创建 账号为huabeier ，密码为m48577,的账号。</li>
<li><code>grant all privileges on mysite_db.x to &#39;huabeier&#39;@&#39;localhost&#39;;</code>给我们刚刚创建的用户访问我们创建的mysite_db数据库权限 </li>
<li><code>flush privileges;</code>刷新一下，现在这个用户已经有了访问mysite_db的权限  </li>
</ul>
<ul>
<li><code>python manage.py createcachetable</code> 缓存表和上面无关</li>
</ul>
<h2 id="Django-sqlite数据迁移到mysql"><a href="#Django-sqlite数据迁移到mysql" class="headerlink" title="Django sqlite数据迁移到mysql"></a>Django sqlite数据迁移到mysql</h2><ol>
<li>去 setting.py把注释掉的sqlite数据库解除注释，把mysql数据库注释，保存  </li>
<li>在命令行执行<code>python manage.py dumpdata &gt; data.json</code>,把数据迁移到data.json </li>
<li>把配置换成mysql  </li>
<li><code>python manage.py loaddata data.json</code>迁移到mysql  <ul>
<li>我这里报错了 <pre><code>django.db.utils.IntegrityError: Problem installing fixture &apos;E:\github\django2.0-course-master\django2.0-course-master\34.评论发送邮件通知\data.json&apos;: Could not load contenttypes.ContentType(pk=7): (1062, &quot;Duplicate entry &apos;blog-blogtype&apos; for key &apos;django_content_type_app_label_model_76bd3d3b_uniq&apos;&quot;)
# 数据重复错误</code></pre></li>
<li>解决 <ul>
<li><code>use mysite_db</code> 使用这个数据库</li>
<li><code>show tables;</code>  展示所有表 </li>
<li><code>select x from django_content_type;</code></li>
<li><code>delete from auth_permission;</code> 删除</li>
<li><code>delete from django_content_type;</code></li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>在centos7里安装Python3.7</title>
    <url>/2019/11/11/%E5%9C%A8centos7%E9%87%8C%E5%AE%89%E8%A3%85Python3-7/</url>
    <content><![CDATA[<p>阿里云自带python2.7,这里我们需要安装python3.7,这里有我安装的一些步骤  </p><p>1.更新yum（个人习惯，可忽略）<br><code>yum update</code><br>2.切换到home目录（可以选择你喜欢的目录，不一定是home）<br><code>cd /home</code><br>3.下载python3.7.2的安装包到home目录；<br><code>wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz</code><br>4.解压<br><code>tar -xvzf Python-3.7.2.tgz</code><br>5.进入解压后的目录；<br><code>cd Python-3.7.2</code><br>6.安装依赖环境<br><code>yum -y install bzip2 bzip2-devel ncurses openssl openssl-devel openssl-static xz lzma xz-devel sqlite sqlite-devel gdbm gdbm-devel tk tk-devel libffi-devel</code><br>7.配置编译参数，把地址修改成/usr/local<br><code>./configure --prefix=/usr/local</code><br>8.编译以及安装  </p><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#编译  </span><br><span class="line">make  </span><br><span class="line">#安装   </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>9.在/etc/ld.so.conf配置python库的路径；<br><code>vim /etc/ld.so.conf.d/python3.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#添加以下内容：wq退出</span><br><span class="line">/usr/local/lib</span><br><span class="line">#python库的路径就是第6步配置的目录下的lib目录</span><br></pre></td></tr></table></figure>

<p>10.将python3与pip3连接到/usr/bin；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/bin/python3 /usr/bin/python3</span><br><span class="line">ln -s /usr/local/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>

<p>11.安装完成，检查版本；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 --version</span><br><span class="line">pip3 --version</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Django部署时报错SQLite 3.8.3 or later is required (found 3.7.17)</title>
    <url>/2019/11/03/Django%E9%83%A8%E7%BD%B2%E6%97%B6%E6%8A%A5%E9%94%99SQLite-3-8-3-or-later-is-required-found-3-7-17/</url>
    <content><![CDATA[<p>问题：<br>昨天在腾讯云上部署自己的项目在执行 python manage.py runserver 时报错：<br><code>django.core.exceptions.ImproperlyConfigured: SQLite 3.8.3 or later is required (found 3.7.17).</code></p><a id="more"></a>
<h2 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">卸载django:   pip uninstall django</span><br><span class="line">安装低版本：   pip install django==2.1.8</span><br></pre></td></tr></table></figure>

<h2 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h2><p>1.查看系统的sqlite3的版本<br><code>sqlite3 --version</code><br>Centos系统自带的sqlite3版本偏低，在上面的错误提示中要求需要SQLite 3.8.3 or later，那么就需要去升级 SQlite 的版本了。<br>2.安装最新的sqlite3并设置更新python库版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">＃更新SQLite 3</span><br><span class="line">＃获取源代码（在主目录中运行）</span><br><span class="line">[root@djangoServer ~]# cd ~</span><br><span class="line">[root@djangoServer ~]# wget https://www.sqlite.org/2019/sqlite-autoconf-3270200.tar.gz</span><br><span class="line">[root@djangoServer ~]# tar -zxvf sqlite-autoconf-3270200.tar.gz</span><br><span class="line"> </span><br><span class="line">＃构建并安装</span><br><span class="line">[root@djangoServer ~]# cd sqlite-autoconf-3270200</span><br><span class="line">[root@djangoServer sqlite-autoconf-3270200]# ./configure --prefix=/usr/local</span><br><span class="line">[root@djangoServer sqlite-autoconf-3270200]# make &amp;&amp; make install</span><br><span class="line">[root@djangoServer sqlite-autoconf-3270200]# find /usr/ -name sqlite3</span><br><span class="line">/usr/bin/sqlite3</span><br><span class="line">/usr/lib64/python2.7/sqlite3</span><br><span class="line">/usr/local/bin/sqlite3</span><br><span class="line">/usr/local/python3/lib/python3.7/site-packages/django/db/backends/sqlite3</span><br><span class="line">/usr/local/python3/lib/python3.7/sqlite3</span><br><span class="line">[root@djangoServer sqlite-autoconf-3270200]# </span><br><span class="line"> </span><br><span class="line">＃不必要的文件，目录删除</span><br><span class="line">[root@djangoServer sqlite-autoconf-3270200]# cd ~</span><br><span class="line">[root@djangoServer ~]# ls</span><br><span class="line">anaconda-ks.cfg  sqlite-autoconf-3270200  sqlite-autoconf-3270200.tar.gz</span><br><span class="line">[root@djangoServer ~]# </span><br><span class="line">[root@djangoServer ~]# rm -rf sqlite-autoconf-3270200.tar.gz</span><br><span class="line">[root@djangoServer ~]# rm -rf sqlite-autoconf-3270200</span><br><span class="line"> </span><br><span class="line">＃检查版本</span><br><span class="line">## 最新安装的sqlite3版本</span><br><span class="line">[root@djangoServer ~]# /usr/local/bin/sqlite3 --version</span><br><span class="line">3.27.2 2019-02-25 16:06:06 bd49a8271d650fa89e446b42e513b595a717b9212c91dd384aab871fc1d0f6d7</span><br><span class="line">[root@djangoServer ~]# </span><br><span class="line"> </span><br><span class="line">## Centos7自带的sqlite3版本</span><br><span class="line">[root@djangoServer ~]# /usr/bin/sqlite3 --version</span><br><span class="line">3.7.17 2013-05-20 00:56:22 118a3b35693b134d56ebd780123b7fd6f1497668</span><br><span class="line">[root@djangoServer ~]# </span><br><span class="line"> </span><br><span class="line">## 可以看到sqlite3的版本还是旧版本，那么需要更新一下。</span><br><span class="line">[root@djangoServer ~]# sqlite3 --version</span><br><span class="line">3.7.17 2013-05-20 00:56:22 118a3b35693b134d56ebd780123b7fd6f1497668</span><br><span class="line">[root@djangoServer ~]# </span><br><span class="line"> </span><br><span class="line">## 更改旧的sqlite3</span><br><span class="line">[root@djangoServer ~]# mv /usr/bin/sqlite3  /usr/bin/sqlite3_old</span><br><span class="line"> </span><br><span class="line">## 软链接将新的sqlite3设置到/usr/bin目录下</span><br><span class="line">[root@djangoServer ~]# ln -s /usr/local/bin/sqlite3   /usr/bin/sqlite3</span><br><span class="line"> </span><br><span class="line">## 查看当前全局sqlite3的版本</span><br><span class="line">[root@djangoServer ~]# sqlite3 --version</span><br><span class="line">3.27.2 2019-02-25 16:06:06 bd49a8271d650fa89e446b42e513b595a717b9212c91dd384aab871fc1d0f6d7</span><br><span class="line">[root@djangoServer ~]# </span><br><span class="line"> </span><br><span class="line">＃将路径传递给共享库</span><br><span class="line"># 设置开机自启动执行，可以将下面的export语句写入 ~/.bashrc 文件中，如果如果你想立即生效，可以执行source 〜/.bashrc 将在每次启动终端时执行</span><br><span class="line">[root@djangoServer ~]# export LD_LIBRARY_PATH=&quot;/usr/local/lib&quot;</span><br><span class="line"> </span><br><span class="line">＃检查Python的SQLite3版本</span><br><span class="line">[root@djangoServer ~]# ipython3</span><br><span class="line">Python 3.7.1 (default, May  3 2019, 09:55:04) </span><br><span class="line">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class="line">IPython 7.5.0 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class="line"> </span><br><span class="line">In [1]: import sqlite3                                                     </span><br><span class="line"> </span><br><span class="line">In [2]: sqlite3.sqlite_version                                             </span><br><span class="line">Out[2]: &apos;3.27.2&apos;</span><br><span class="line"> </span><br><span class="line">In [3]: exit                                                               </span><br><span class="line">[root@djangoServer ~]# </span><br><span class="line"> </span><br><span class="line">＃启动开发服务器</span><br><span class="line">[root@djangoServer ~]# cd /work/</span><br><span class="line">[root@djangoServer work]# ls</span><br><span class="line">db.sqlite3  manage.py  polls  test_django</span><br><span class="line">[root@djangoServer work]# python3 manage.py runserver</span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://blog.csdn.net/qq_39969226/article/details/92218635" target="_blank" rel="noopener">参考文章</a></p>
]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2019/10/30/Django-sell/</url>
    <content><![CDATA[<hr><p>title: Django  — sell<br>date: 2019-10-30 11:24:06<br>tags: Django<br>categories: Django</p><a id="more"></a>

<hr>
<h2 id="django–shell"><a href="#django–shell" class="headerlink" title="django–shell"></a>django–shell</h2><p> 导入模型<br>    <code>from blog.models import Blog</code>—从blog这个app的models里导入模型<br>    <code>Blog.objects.all()</code>—Blog模型里的所有属性<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blog=Blog()</span><br><span class="line">blog.title=&quot;啥子&quot;</span><br><span class="line">blog.content=&quot;xxxxx&quot;</span><br></pre></td></tr></table></figure></p>
<pre><code>这是给Blog模型创建一个对象，给这个对象添加属性


`from django.contrib.auth.models import User`---这是django自带的库
` User.objects.all()`---通过这个能够查询出你创建的所有的账户
`blog.save()`----这个是保存我们创建的那个对象
`dir(blog)`---查询blog对象有哪些属性 通过blog.属性名 调用

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in range(1,31):</span><br><span class="line">    blog=Blog()</span><br><span class="line">    blog.title=&quot;for %s&quot;% i</span><br><span class="line">    blog.content=&quot;xxxx: %s&quot;% i</span><br><span class="line">    blog.blog_type=blog_type</span><br><span class="line">    blog.auth=user</span><br><span class="line">    blog.save()</span><br></pre></td></tr></table></figure>

创建了三十篇文章
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blogs=Blog.objects.all()</span><br><span class="line"> blogs.count()</span><br></pre></td></tr></table></figure>

这是统计数据库中有多少个Blog模型（文章）

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   from django.core.paginator import Paginator #自带的分页器</span><br><span class="line">   blogs=Blog.objects.all()</span><br><span class="line">    blogs.count()</span><br><span class="line">   paginator=Paginator(blogs,10)#把这个对象按10篇分一页，执行这个的时候一般还会报错，那是</span><br><span class="line">   因为你没有给你的文章排序，可以去models.py里添加</span><br><span class="line">   </span><br><span class="line">class Meta:</span><br><span class="line">	ordering=[&apos;-created_time&apos;]  #按创建时间的倒叙排序，就是最新的文章在最上面</span><br></pre></td></tr></table></figure>

`dir(paginator)`查看有哪些属性
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">paginator.num_pages #一共有几页</span><br><span class="line">4</span><br><span class="line">paginator.page_range#页数范围</span><br><span class="line">range(1, 5)</span><br><span class="line">pag1=paginator.page(1)#第一页</span><br><span class="line"> pag1      </span><br><span class="line">&lt;Page 1 of 4&gt;</span><br><span class="line">pag1.object_list#第一页的列表</span><br><span class="line">pag1.object_list.count()第一页的文章数</span><br></pre></td></tr></table></figure></code></pre>]]></content>
  </entry>
  <entry>
    <title>Django评论登录</title>
    <url>/2019/10/19/Django%E8%AF%84%E8%AE%BA%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>程序员必知资源</title>
    <url>/2019/10/18/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="良心的博主"><a href="#良心的博主" class="headerlink" title="良心的博主"></a>良心的博主</h1><hr>
<p>好用好用好用 <a href="https://blog.csdn.net/m0_38106923/article/details/100130354#1%E3%80%81%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E" target="_blank" rel="noopener">良心博客</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>业余</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
